/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package BIL402_HW3;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import spark.ModelAndView;
import spark.Request;
import spark.Response;
import spark.Route;
import spark.template.mustache.MustacheTemplateEngine;
import static spark.Spark.get;
import static spark.Spark.post;
import static spark.Spark.port;
import static spark.Spark.before;

public class App {
    // public String getGreeting() {
    //     return "Hello World!";
    // }

    private static Logger log = LoggerFactory.getLogger(App.class);

    public static void main(String[] args) {

        int port = Integer.parseInt(System.getenv("PORT"));
        port(port);


        // System.out.println(new App().getGreeting());

        get("/compute", (rq,rs) -> {
          Map<String,String> map = new HashMap<String,String>();
          // map.put("result", "not computed yet!");
          return new MustacheTemplateEngine().render(
            new ModelAndView(map, "compute.mustache")
          );
        });

        post("/compute", (req,res) -> {
          String arr = req.queryParams("arr");
          Integer first = Integer.parseInt(req.queryParams("first").replaceAll("\\s", ""));
          Integer second = Integer.parseInt(req.queryParams("second").replaceAll("\\s", ""));
          Integer last = Integer.parseInt(req.queryParams("last").replaceAll("\\s", ""));

          java.util.Scanner sc1 = new java.util.Scanner(arr);
          sc1.useDelimiter("[;\r\n]+");
          java.util.ArrayList<Integer> inputList = new java.util.ArrayList<>();
          while(sc1.hasNext()){
            int value = Integer.parseInt(sc1.next().replaceAll("\\s", ""));
            inputList.add(value);
          }
          sc1.close();
          System.out.println(inputList);

          boolean result = App.BiggerThanSum(inputList, first, second, last);
          Map<String,Boolean> map = new HashMap<String,Boolean>();
          map.put("result", result);
          return new MustacheTemplateEngine().render(
            new ModelAndView(map, "compute.mustache")
            );
        });

        before((req,res) -> {
          log.info(String.format("%s %s", req.requestMethod(), req.url()));
        });

    }

    public static boolean BiggerThanSum(ArrayList<Integer> arr, int first, int second, int last){
      // Girilen üç sayının toplamından büyük en az bir elemanı varsa dizinin true döndür.
      if(arr == null){
        return false;
      }

      int sum = first + second + last;
      for (int elm:arr){
        if(elm >= sum){
          return true;
        }
      }
      return false;
    }

    // public static boolean search(ArrayList<Integer> arr, int e){
    //     System.out.println("Inside search");
    //     if (arr == null ) {
    //       return false;
    //     }
  
    //     for (int elt:arr) {
    //       if (elt==e) {
    //         return true;
    //       }
    //     }
    //     return false;
  
    // }

   
}
